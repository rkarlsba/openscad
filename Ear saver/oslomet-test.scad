// OpenSCAD file automatically generated by svg2cookiercutter.py
// parameters tunable by user
wallHeight = 12;
minWallThickness = 2;
maxWallThickness = 3;
minInsideWallThickness = 1;
maxInsideWallThickness = 3;

wallFlareWidth = 5;
wallFlareThickness = 3;
insideWallFlareWidth = 5;
insideWallFlareThickness = 3;

featureHeight = 8;
minFeatureThickness = 1;
maxFeatureThickness = 3;

connectorThickness = 1.75;
cuttingTaperHeight = 2.5;
cuttingEdgeThickness = 1.25;
// set to non-zero value to generate a demoulding plate
demouldingPlateHeight = 0;
demouldingPlateSlack = 1.5;

// sizing
function clamp(t,minimum,maximum) = min(maximum,max(t,minimum));
function featureThickness(t)      = clamp(t,minFeatureThickness,maxFeatureThickness);
function wallThickness(t)         = clamp(t,minWallThickness,maxWallThickness);
function insideWallThickness(t)   = clamp(t,minInsideWallThickness,maxInsideWallThickness);

size = 128.628;
scale = size/128.628;

// helper modules: subshapes
module ribbon(points, thickness=1) {
    union() {
        for (i=[1:len(points)-1]) {
            hull() {
                translate(points[i-1]) circle(d=thickness, $fn=8);
                translate(points[i]) circle(d=thickness, $fn=8);
            }
        }
    }
}


module wall(points,height,thickness) {
    module profile() {
        if (height>=cuttingTaperHeight && cuttingTaperHeight>0 && cuttingEdgeThickness<thickness) {
            cylinder(h=height-cuttingTaperHeight+0.001,d=thickness,$fn=8);
            translate([0,0,height-cuttingTaperHeight]) cylinder(h=cuttingTaperHeight,d1=thickness,d2=cuttingEdgeThickness);
        }
        else {
            cylinder(h=height,d=thickness,$fn=8);
        }
    }
    for (i=[1:len(points)-1]) {
        hull() {
            translate(points[i-1]) profile();
            translate(points[i])   profile();
        }
    }
}


module outerFlare(path) {
  difference() {
    render(convexity=10) linear_extrude(height=wallFlareThickness) ribbon(path,thickness=wallFlareWidth);
    translate([0,0,-0.01]) linear_extrude(height=wallFlareThickness+0.02) polygon(points=path);
  }
}

module innerFlare(path) {
  intersection() {
    render(convexity=10) linear_extrude(height=insideWallFlareThickness) ribbon(path,thickness=insideWallFlareWidth);
    translate([0,0,-0.01]) linear_extrude(height=insideWallFlareThickness+0.02) polygon(points=path);
  }
}

module fill(path,height) {
  render(convexity=10) linear_extrude(height=height) polygon(points=path);
}


// data from svg file
feature_0 = scale * [[-41.231,215.240],[-40.045,216.234],[-38.770,216.958],[-37.440,217.413],[-36.089,217.597],[-34.751,217.512],[-33.460,217.158],[-32.251,216.536],[-31.157,215.645],[-30.235,214.519],[-29.593,213.291],[-29.229,211.990],[-29.142,210.649],[-29.328,209.300],[-29.787,207.975],[-30.515,206.705],[-31.511,205.521],[-32.695,204.525],[-33.966,203.796],[-35.291,203.337],[-36.640,203.151],[-37.981,203.238],[-39.281,203.602],[-40.510,204.244],[-41.636,205.166],[-42.534,206.267],[-43.160,207.480],[-43.514,208.771],[-43.597,210.108],[-43.410,211.456],[-42.953,212.783],[-42.226,214.055],[-41.231,215.240]];

feature_1 = scale * [[-27.309,201.319],[-26.396,202.320],[-25.602,203.375],[-24.929,204.474],[-24.376,205.611],[-23.944,206.778],[-23.633,207.969],[-23.444,209.175],[-23.377,210.389],[-23.432,211.605],[-23.611,212.814],[-23.912,214.009],[-24.338,215.182],[-24.887,216.327],[-25.561,217.436],[-26.360,218.502],[-27.285,219.517],[-28.286,220.428],[-29.341,221.217],[-30.441,221.882],[-31.579,222.424],[-32.748,222.844],[-33.939,223.142],[-35.145,223.317],[-36.358,223.371],[-37.572,223.303],[-38.778,223.114],[-39.969,222.804],[-41.137,222.372],[-42.275,221.820],[-43.375,221.148],[-44.430,220.355],[-45.432,219.442],[-46.345,218.440],[-47.138,217.385],[-47.810,216.285],[-48.362,215.147],[-48.794,213.979],[-49.104,212.788],[-49.294,211.581],[-49.362,210.368],[-49.308,209.154],[-49.132,207.948],[-48.835,206.757],[-48.415,205.589],[-47.873,204.451],[-47.208,203.350],[-46.420,202.296],[-45.508,201.294],[-44.489,200.365],[-43.420,199.563],[-42.309,198.887],[-41.163,198.336],[-39.988,197.910],[-38.793,197.609],[-37.585,197.431],[-36.371,197.377],[-35.157,197.445],[-33.953,197.636],[-32.764,197.948],[-31.598,198.382],[-30.462,198.936],[-29.364,199.611],[-28.310,200.405],[-27.309,201.319]];

feature_2 = scale * [[-63.187,218.973],[-61.577,217.601],[-60.751,217.065],[-59.072,216.288],[-58.227,216.044],[-56.540,215.838],[-55.705,215.872],[-54.069,216.212],[-53.274,216.514],[-51.748,217.374],[-50.328,218.568],[-54.252,222.492],[-54.904,221.928],[-55.583,221.513],[-56.283,221.253],[-56.998,221.156],[-57.724,221.227],[-58.452,221.473],[-59.178,221.901],[-59.896,222.517],[-60.604,223.434],[-60.965,224.427],[-60.991,224.928],[-60.900,225.420],[-60.682,225.893],[-60.327,226.338],[-59.838,226.713],[-59.281,226.934],[-58.656,227.016],[-57.960,226.971],[-56.355,226.551],[-51.837,224.799],[-50.477,224.422],[-49.114,224.193],[-47.770,224.165],[-46.468,224.393],[-45.229,224.930],[-44.077,225.832],[-43.494,226.475],[-42.606,227.827],[-42.297,228.529],[-41.939,229.967],[-41.910,231.429],[-42.194,232.886],[-42.771,234.314],[-43.624,235.683],[-44.735,236.968],[-46.223,238.229],[-47.761,239.117],[-49.318,239.650],[-50.864,239.844],[-52.369,239.717],[-53.801,239.285],[-55.131,238.566],[-56.328,237.576],[-52.658,233.906],[-52.156,234.267],[-51.623,234.531],[-51.065,234.688],[-50.491,234.732],[-49.905,234.653],[-49.316,234.444],[-48.729,234.096],[-48.153,233.603],[-47.492,232.730],[-47.197,231.824],[-47.194,231.378],[-47.291,230.947],[-47.492,230.538],[-47.798,230.159],[-48.168,229.869],[-48.583,229.695],[-49.056,229.631],[-49.598,229.670],[-50.941,230.028],[-56.039,231.886],[-57.609,232.261],[-59.115,232.441],[-60.556,232.385],[-61.931,232.052],[-63.238,231.399],[-64.478,230.387],[-65.059,229.745],[-65.923,228.398],[-66.213,227.700],[-66.517,226.264],[-66.471,224.794],[-66.096,223.310],[-65.411,221.831],[-64.434,220.379],[-63.187,218.973]];

feature_3 = scale * [[-89.379,263.444],[-88.193,264.438],[-86.918,265.162],[-85.588,265.616],[-84.237,265.800],[-82.899,265.716],[-81.609,265.362],[-80.399,264.739],[-79.305,263.848],[-78.383,262.723],[-77.741,261.494],[-77.377,260.193],[-77.289,258.853],[-77.476,257.504],[-77.934,256.178],[-78.663,254.908],[-79.659,253.725],[-80.843,252.728],[-82.113,251.999],[-83.439,251.541],[-84.788,251.354],[-86.129,251.442],[-87.429,251.805],[-88.658,252.447],[-89.784,253.369],[-90.682,254.471],[-91.308,255.684],[-91.662,256.975],[-91.745,258.311],[-91.558,259.659],[-91.101,260.986],[-90.374,262.259],[-89.379,263.444]];

feature_4 = scale * [[-75.458,249.523],[-74.545,250.525],[-73.751,251.579],[-73.078,252.678],[-72.525,253.815],[-72.093,254.983],[-71.782,256.173],[-71.593,257.379],[-71.525,258.594],[-71.581,259.809],[-71.759,261.018],[-72.061,262.212],[-72.486,263.386],[-73.035,264.531],[-73.709,265.640],[-74.508,266.706],[-75.433,267.721],[-76.434,268.632],[-77.489,269.420],[-78.589,270.085],[-79.727,270.628],[-80.896,271.047],[-82.087,271.345],[-83.293,271.521],[-84.506,271.574],[-85.720,271.507],[-86.926,271.317],[-88.117,271.007],[-89.285,270.576],[-90.423,270.024],[-91.523,269.351],[-92.578,268.558],[-93.580,267.645],[-94.493,266.643],[-95.286,265.588],[-95.958,264.488],[-96.510,263.350],[-96.942,262.182],[-97.252,260.991],[-97.442,259.785],[-97.510,258.571],[-97.456,257.358],[-97.280,256.151],[-96.983,254.960],[-96.563,253.792],[-96.021,252.654],[-95.356,251.554],[-94.568,250.499],[-93.656,249.497],[-92.637,248.569],[-91.568,247.767],[-90.457,247.091],[-89.311,246.540],[-88.136,246.114],[-86.942,245.812],[-85.733,245.635],[-84.519,245.581],[-83.306,245.649],[-82.101,245.840],[-80.912,246.152],[-79.746,246.586],[-78.611,247.141],[-77.513,247.815],[-76.459,248.610],[-75.458,249.523]];

feature_5 = scale * [[-78.712,242.871],[-82.574,239.009],[-72.519,228.954],[-54.919,246.554],[-58.843,250.478],[-72.581,236.740],[-78.712,242.871]];

feature_6 = scale * [[-148.364,205.170],[-144.443,209.091],[-130.777,195.425],[-126.778,199.424],[-140.444,213.090],[-136.520,217.014],[-140.161,220.655],[-152.004,208.811],[-148.364,205.170]];

feature_7 = scale * [[-123.812,209.641],[-120.167,205.996],[-109.859,216.304],[-127.185,233.630],[-137.484,223.332],[-133.839,219.687],[-127.437,226.088],[-124.267,222.918],[-130.072,217.112],[-126.629,213.670],[-120.824,219.475],[-117.401,216.052],[-123.812,209.641]];

feature_8 = scale * [[-106.670,219.493],[-102.797,223.366],[-112.327,232.952],[-99.468,226.690],[-95.893,230.265],[-102.144,243.244],[-92.554,233.609],[-88.682,237.481],[-106.008,254.808],[-111.171,249.645],[-103.259,234.006],[-118.807,242.008],[-123.996,236.819],[-106.670,219.493]];

// main modules
module cookieCutter() {
    fill(feature_0,featureHeight);
    fill(feature_1,featureHeight);
    fill(feature_2,featureHeight);
    fill(feature_3,featureHeight);
    fill(feature_4,featureHeight);
    fill(feature_5,featureHeight);
    fill(feature_6,featureHeight);
    fill(feature_7,featureHeight);
    fill(feature_8,featureHeight);
}

module demouldingPlate(){
  // a plate to help push on the cookie to turn it out
  render(convexity=10) difference() {
    linear_extrude(height=demouldingPlateHeight) union() {
    }
    translate([0,0,-0.01]) linear_extrude(height=demouldingPlateHeight+0.02) union() {
      ribbon(feature_0,thickness=demouldingPlateSlack);
      ribbon(feature_1,thickness=demouldingPlateSlack);
      ribbon(feature_2,thickness=demouldingPlateSlack);
      ribbon(feature_3,thickness=demouldingPlateSlack);
      ribbon(feature_4,thickness=demouldingPlateSlack);
      ribbon(feature_5,thickness=demouldingPlateSlack);
      ribbon(feature_6,thickness=demouldingPlateSlack);
      ribbon(feature_7,thickness=demouldingPlateSlack);
      ribbon(feature_8,thickness=demouldingPlateSlack);
      polygon(points=feature_0);
      polygon(points=feature_1);
      polygon(points=feature_2);
      polygon(points=feature_3);
      polygon(points=feature_4);
      polygon(points=feature_5);
      polygon(points=feature_6);
      polygon(points=feature_7);
      polygon(points=feature_8);
    }
  }
}

module finalcall() { ////////////////////////////////////////////////////////////////////////////////
    // final call, use main modules
    translate([152.004*scale + wallFlareWidth/2,  -195.425*scale + wallFlareWidth/2,0])
      cookieCutter();

    // translate([-40,15,0]) cylinder(h=wallHeight+10,d=5,$fn=20); // handle
    if (demouldingPlateHeight>0)
      mirror([1,0,0])
        translate([152.004*scale + wallFlareWidth/2,  -195.425*scale + wallFlareWidth/2,0])
          demouldingPlate();
}

module oslomet() {
    rotate([0,0,2]) translate([132,-5,0]) {
        difference() {
            mirror([1,0,0]) finalcall();
            translate([-118,17.5,0])
                cylinder(h=10,d=16);
            translate([-70,65.5,0])
                cylinder(h=10,d=16);
        }
    }
}

oslomet();